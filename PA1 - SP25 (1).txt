The University of Texas at El Paso
Department of Computer Science
CS 3331 – Advanced Object-Oriented Programming
Instructor: Dr. Bhanukiran Gurijala
Spring 2025

Project Part 1

Academic Integrity Statement:
This work is to be done as a team. It is not permitted to share, reproduce, or alter any part of this assignment for any purpose. Students are not permitted to share code, upload this assignment online in any form, or view/receive/modify code written by anyone else. This assignment is part of an academic course at The University of Texas at El Paso and a grade will be assigned for the work produced individually by the student.

Instructions:
Your code must be written in Java. In the comment heading of your source code, you should write your name(s), date, course, instructor, project part 1, project description, and honesty statement. The honesty statement must state that you completed this work entirely on your own without any outside sources including peers, experts, online sources, or the like. Only assistance from the instructor, TA, or IA will be permitted. Generate Javadoc for your complete code. 

Scenario:
You are tasked with designing a system to model and interact with space debris in Low Earth Orbit (LEO). Your system will allow scientists, space agencies, and policymakers to track debris, assess if debris is in orbit or out of orbit, and analyze its potential impact on space operations to raise awareness among decision-makers.

Part A:
Read the requirements described in Part B to complete Part A. Part A must be completed before implementing the requirements in Part B
Write a UML Use Case Diagram (Level II) for your system. With at least the following:
3 actors (e.g., Scientist, Space Agency, Policymaker)
3 Use Cases (e.g., Track Debris, Assess Orbit Status, Analyze Impact)
1 includes relationship
1 extends relationship
Write 2 use case scenarios based on Part B.
Write a UML Class Diagram to structure your code using the classes, requirements, and concepts described in Part B
Part B
Create the following classes (Note: some may be abstract)
SpaceObject
Debris
Satellite
MissionControl
Tracking System
ImpactAnalysis
DebrisDensityAnalysis
RunSimulation (where you have your main method)
Any other additional Classes that you believe will be beneficial to help with successfully implementing this program
Class considerations
All classes should have appropriate methods and fields/attributes.
Use object-oriented principles such as encapsulation and inheritance.
Read files with debris and satellite information and store the information appropriately.
Pick an appropriate data structure.
Consider the time complexity.
Consider space complexity.
Ensure efficient retrieval and storage of objects.
Consider the use of objects and how your objects will interact with each other.
Allow for user interaction. 
The system shall first capture the type of use interacting with the system. The allowed types of users include:
Scientist
Space Agency Representative
Policymaker
Administrator
Exit
If the user is a Scientist, the following menu options shall be displayed:
Track Objects in Space
Assess Orbit Status
Back: If the user selects this option, the system shall take the user to the previous menu screen (in this case, the system will present the user with options to select the type of user. E.g., it will present the menu option mentioned in 3a.) 
If the user is a Space Agency Representative, the following menu options shall be displayed:
Analyze Long-term Impact
Generate Density Reports
Back: If the user selects this option, the system shall take the user to the previous menu screen (in this case, the system will present the user with options to select the type of user. E.g., it will present the menu option mentioned in 3a.) 
If the user is a Policymaker, the following menu options shall be displayed:
Review Reports on Debris Impact
Assess Risk Levels for Future Space Missions
Back: If the user selects this option, the system shall take the user to the previous menu screen (in this case, the system will present the user with options to select the type of user. E.g., it will present the menu option mentioned in 3a.) 
If the user is an Administrator, the following menu options shall be displayed:
Create User
Manage User
Delete User
Back: If the user selects this option, the system shall take the user to the previous menu screen (in this case, the system will present the user with options to select the type of user. E.g., it will present the menu option mentioned in 3a.) 
In this part, your system should be able to handle the functionality for Scientist. The following functionality should be implemented:
Track Objects in Space: On selecting this option, the Scientist should be presented with the following menu options:
Rocket Body: If the user selects this option, the system shall provide a list of all Rocket Body with the following information:
Record ID, Satellite Name, Country, Orbit Type, Launch Year, Launch Site, Longitude, Avg. Longitude, Geohash, and Days Old.
Debris: If the user selects this option, the system shall provide a list of all Debris with the following information:
Record ID, Satellite Name, Country, Orbit Type, Launch Year, Launch Site, Longitude, Avg. Longitude, Geohash, and Days Old.
Payload: If the user selects this option, the system shall provide a list of all Payload with the following information:
Record ID, Satellite Name, Country, Orbit Type, Launch Year, Launch Site, Longitude, Avg. Longitude, Geohash, and Days Old.
Unknown: If the user selects this option, the system shall provide a list of all Unknown with the following information:
Record ID, Satellite Name, Country, Orbit Type, Launch Year, Launch Site, Longitude, Avg. Longitude, Geohash, and Days Old.
Assess Orbit Status: If the user selects this option, the system shall provide the following menu options:
Track Objects in LEO: If the user selects this option, the system shall provide a list of all objects in the LEO with the following information:
Record ID, Satellite Name, Country, Orbit Type, Launch Year, Launch Site, Longitude, Avg. Longitude, Geohash, and Days Old.
Assess if debris is still in orbit: If the user selects this option, the system shall perform the following functionality:
To assess whether debris is still in orbit or has exited (decayed or deorbited), we can infer using the following key indicators:
The debris is still in orbit if the approximate_orbit_type is defined (LEO, MEO, etc.), longitude has a valid value, days_old is < 15,000 days, and conjunction_count is >=1
The debris has exited the orbit if the approximate_orbit_type is missing or unknown, longitude is missing or zero, days_old is > 15,000 days, and conjunction_count is 0 (not seen interacting recently).
Calculate orbital drift (longitude deviation computed as abs(longitude – avg_longitude). If the orbital drift is greater than 50, classify the debris as “High Risk”. If the orbital drift is greater than 10, classify the debris as “Moderate Risk”, otherwise as “Low Risk”
After assessing the orbit status, 
Save the computed/calculated information by creating new columns called still_in_orbit that can take the value of True/False, risk_level that can be High, Moderate, or Low as mentioned above. The new CSV should include all columns of the original CSV along with the assessed orbit status column.
Write a new TXT file with the count of in-orbit vs exited debris. This TXT file should also include information about all the exited debris. The TXT file shall include at least the following information about the exited debris:
Record ID, Satellite Name, Country, Orbit Type, Launch Year, Launch Site, Longitude, Avg. Longitude, Geohash, and Days Old.
Log all system interactions.
Keep track of all operations performed, including timestamps
Log entries should persist across sessions (append instead of overwriting)
A sample of how a log file can look is provided below (not necessarily the only way – feel free to make it better):

“[2024-10-10 12:30:00] Scientist queried debris within 200 km of Satellite-456.”
“[2024-10-10 12:35:10] Debris-123 is still in orbit at an altitude of 400 km.”
“[2024-10-10 12:40:25] Debris density report generated: "High debris density detected between 700-800 km altitude."

The user can exit the program by writing “EXIT” while in the main menu only. When the user exits the program
Write a new (updated) Debris Tracking Report (similar to the original input, except with the new values computed as part of assessing if debris is still in orbit functionality) 
Save the latest log data.
Handle all exceptions appropriately.
Ensure robust error handling for file operations, user inputs, and calculations.
Write Javadoc for your system.
Write a lab report describing your work (template provided)
Any assumptions made should be precisely mentioned in the source code and described in the lab report.
The lab report should contain sample screenshots of the program being run in different circumstances, including successful and failing changes.
Complete an individual code review on your code (template provided)
Schedule a demo with TA/IA for both check-in and final deliverables
**If the submission is past the deadline** Your report must have an additional section entitled “Why I submitted late”. In that section, explain the reason why your submission was late. (Note: you will still be penalized the typical late penalty)

Deadlines:
Check-in on April 13, 2025, by 11:59 pm:
UML Class Diagram Progress (.pdf)
UML Use Case Diagram Progress (.pdf)
Current Progress Source Code (.java) – Commit current progress up to this point.
For each item (1-3)
Does not have to be complete. Ensure there are no compilation errors.
Should be a significant amount of work done (as determined by the instructional team).
Demo with TA/IA after 04/13. All the check-in demos should be completed by 04/17. The TA/IA will review for progress and provide informal feedback.
The TA/IA working with the team will announce their availability for check-ins on Blackboard.

Final Deliverables on April 20, 2025, by 11:59 pm:
UML Class Diagram (.pdf)
UML Use Case Diagram (.pdf)
Use case Scenarios (.pdf)
Source code (.java files)
Lab report (.pdf file)
Javadoc (entire doc folder)
Updated Debris Tracking Report (.csv)
Log (.txt)





